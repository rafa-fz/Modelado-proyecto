version: "3"
services:
  # Router
  router01:
    image: mongo
    container_name: router-01
    command: mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all
    ports:
      - 27117:27017
    restart: always
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_router01_db:/data/db
      - ./vol/mongodb_cluster_router01_config:/data/configdb
    cpus: 0.5
    mem_limit: 512m

  router02:
    image: mongo
    container_name: router-02
    command: mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_router02_db:/data/db
      - ./vol/mongodb_cluster_router02_config:/data/configdb
    ports:
      - 27118:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m
    links:
      - router01

  # Config Servers
  configsvr01:
    image: mongo
    container_name: mongo-config-01
    command: mongod --port 27017 --configsvr --replSet rs-config-server
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_configsvr01_db:/data/db
      - ./vol/mongodb_cluster_configsvr01_config:/data/configdb
    ports:
      - 27119:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m
    links:
      - shard01-a

  configsvr02:
    image: mongo
    container_name: mongo-config-02
    command: mongod --port 27017 --configsvr --replSet rs-config-server
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_configsvr02_db:/data/db
      - ./vol/mongodb_cluster_configsvr02_config:/data/configdb
    ports:
      - 27120:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m
    links:
      - configsvr01

  configsvr03:
    image: mongo
    container_name: mongo-config-03
    command: mongod --port 27017 --configsvr --replSet rs-config-server
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_configsvr03_db:/data/db
      - ./vol/mongodb_cluster_configsvr03_config:/data/configdb
    ports:
      - 27121:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m
    links:
      - configsvr02

  ## Shards
  ## Shards 01

  shard01-a:
    image: mongo
    container_name: shard-01-node-a
    command: mongod --port 27017 --shardsvr --replSet rs-shard-01
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_shard01_a_db:/data/db
      - ./vol/mongodb_cluster_shard01_a_config:/data/configdb
    ports:
      - 27122:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m
    links:
      - shard01-b
      - shard01-c

  shard01-b:
    image: mongo
    container_name: shard-01-node-b
    command: mongod --port 27017 --shardsvr --replSet rs-shard-01
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_shard01_b_db:/data/db
      - ./vol/mongodb_cluster_shard01_b_config:/data/configdb
    ports:
      - 27123:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m

  shard01-c:
    image: mongo
    container_name: shard-01-node-c
    command: mongod --port 27017 --shardsvr --replSet rs-shard-01
    volumes:
      - ./scripts:/scripts
      - ./vol/mongodb_cluster_shard01_c_db:/data/db
      - ./vol/mongodb_cluster_shard01_c_config:/data/configdb
    ports:
      - 27124:27017
    restart: always
    cpus: 0.5
    mem_limit: 512m

  ## node API
  # api:
  #   container_name: api-node
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3000:3000
  #   expose:
  #     - 3000
  #     # links:
  #     #   - router01
  #     #   - router02
  #     # depends_on:
  #     #   - router01
  #     #   - router02

volumes:
  mongodb_cluster_router01_db:
  mongodb_cluster_router01_config:

  mongodb_cluster_router02_db:
  mongodb_cluster_router02_config:

  mongodb_cluster_configsvr01_db:
  mongodb_cluster_configsvr01_config:

  mongodb_cluster_configsvr02_db:
  mongodb_cluster_configsvr02_config:

  mongodb_cluster_configsvr03_db:
  mongodb_cluster_configsvr03_config:

  mongodb_cluster_shard01_a_db:
  mongodb_cluster_shard01_a_config:

  mongodb_cluster_shard01_b_db:
  mongodb_cluster_shard01_b_config:

  mongodb_cluster_shard01_c_db:
  mongodb_cluster_shard01_c_config:
# docker-compose up -d
# docker-compose down -v --remove-orphans

# docker-compose exec configsvr01 sh -c "mongosh < /scripts/init-configserver.js"
# docker-compose exec shard01-a sh -c "mongosh < /scripts/init-shard01.js"

# docker-compose exec router01 sh -c "mongosh < /scripts/init-router.js"

# docker-compose exec router01 mongosh --port 27017

#### - Enable sharding for database `Project`
# sh.enableSharding("Project")

#### - Setup shardingKey for collection `products`
# db.adminCommand( { shardCollection: "Project.products", key: { oemNumber: "hashed", zipCode: 1, supplierId: 1 } } )

# Connect MongoDB Compass
# mongodb://127.0.0.1:27117,127.0.0.1:27118
# mongodb://localhost:27117,localhost:27118/

# verificar
# docker-compose exec router01 mongosh --port 27017
# sh.status()

# docker exec -it shard-01-node-a bash -c "echo 'rs.status()' | mongosh --port 27017"

# docker-compose exec router01 mongosh --port 27017
# use Project
# db.stats()
# db.products.getShardDistribution()

#more
# docker exec -it mongo-config-01 bash -c "echo 'rs.status()' | mongosh --port 27017"

# docker exec -it shard-01-node-a bash -c "echo 'rs.help()' | mongosh --port 27017"
# docker exec -it shard-01-node-a bash -c "echo 'rs.status()' | mongosh --port 27017"
# docker exec -it shard-01-node-a bash -c "echo 'rs.printReplicationInfo()' | mongosh --port 27017"
# docker exec -it shard-01-node-a bash -c "echo 'rs.printSlaveReplicationInfo()' | mongosh --port 27017"
